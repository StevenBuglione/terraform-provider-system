---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "{{.Name}} | {{.Type}} | {{.ProviderName}}"
name: "{{.Name}}"
type: "{{.Type}}"
subcategory: ""
description: |-
{{ .Description | plainmarkdown | trimspace | prefixlines "  " }}
---

# {{.Type}}: {{.Name}}

{{ .Description | trimspace }}

`system_file` ensures a file exists on the remote server with specific content, permissions and ownership to user and group. The content of the file can be provided statically or sources from local or http(s) sources.

## Usage

### Static content

This example ensures a file exists at the path `/root/hello-world.txt` with the content provided in the `content` attribute. Permissions and ownership are the defaults and depend on the authenticated user. The value of `content` is stored in the state in plaintext.

Consider the `content` attribute for relatively small, text-based file content. For large binary file content, use the `source` attribute.

```terraform
resource "system_file" "static_content" {
  path    = "/root/hello-world.txt"
  content = "Hello world!"
}
```

```terraform
resource "system_file" "static_content_multiline" {
  path    = "/root/hello-world.txt"
  content = trimspace(<<EOT
Hello world!
Hello everyone!
EOT
}
```

### Sensitive content

This example ensures a file exists at the path `/root/hello-world.txt` with the content provided in the `content_sensitive` attribute. The attribute `content_sensitive` is marked as sensitive in contrast to `content` which implies that its value is redacted from the output of plan, apply, or destroy commands. Note, that like `content`, the value of  `content_sensitive` is stored in the state in plaintext.

```terraform
resource "system_file" "sensitive_content" {
  path              = "/root/some-secret.txt"
  content_sensitive = "S3c3et!"
}
```

### Explicit permissions

File permissions can be explicitly defined in the `mode` attribute in octal format.

```terraform
resource "system_file" "permissions" {
  path    = "/root/hello-world.txt"
  content = "Hello world!"
  mode    = 600
}
```

### Explicit ownership (using name)

The user and group owning the file can be configured explicitly in attributes `user` and `group`. The user or group is referenced by their canonical name. The `system_file` resource expects that the user or group exists on the remote server.

```terraform
resource "system_file" "ownership_name" {
  path = "/root/hello-world.txt"
  content = "Hello world!"
  user = "johndoe"
  group = "johndoe"
}
```

### Explicit ownership (using uid or gid)

The user and group owning the file can be configured explicitly in attributes `uid` and `gid`. The user or group is referenced by their id. In contrast to explicit ownership by name, the user or group must not exist on the remote server.

```terraform
resource "system_file" "ownership_id" {
  path    = "/root/hello-world.txt"
  content = "Hello world!"
  uid     = 1001
  gid     = 1001
}
```

You may consider managing the owning user with a `system_user` resource or the owning group with a `system_group` resource, and use the outputs of these resources to define the `uid` and `gid` attribute.

```terraform
resource "system_group" "johndoe" {
  name = "johndoe"
}

resource "system_user" "johndoe" {
  name = "johndoe"
  gid  = system_group.johndoe.gid
}

resource "system_file" "ownership_id" {
  path    = "/root/hello-world.txt"
  content = "Hello world!"
  uid     = system_user.johndoe.uid
  gid     = system_group.johndoe.gid
}
```

### Local file source

This example ensures a file exists on the remote at the path `/root/upload.zip` with the content from a file on the local client. The `source` attribute provides the path to the file on the client.

When using `source` instead of `content` or `content_sensitive`, the file content is *not stored* in the Terraform state.

```terraform
resource "system_file" "upload" {
  path   = "/root/upload.zip"
  source = "./upload.zip"
}
```

### HTTP/HTTPS source

This example ensures a file exists on the remote at the path `/root/upload.zip` with the content from a `http://` or `https://` URL.

The connection to the HTTP server of the source URL is established from the client and not from the remote server. Effectively, the client downloads from the URL source and uploads via the ssh connection to the remote server. This implies that the remote server must not be able to connect to the source URL directly.

Changes of the file on the remote server are detected and will cause the file to be downloaded from the source URL again. Changes of the content of the source URL are detected via changes in the ETag returned in the http response. If an ETag is not returned by the web server, changes will not be detected.

```terraform
resource "file" "https_source" {
  path   = "/root/terraform_1.2.8_SHA256SUMS"
  source = "https://releases.hashicorp.com/terraform/1.2.8/terraform_1.2.8_SHA256SUMS"
}
```

## Notes

This section describes general notes for using the `system_file` resource.

- Attributes `content`, `content_sensitive`, `source` are mutually exclusive
- File content is *stored* in the state when using the attributes `content` or `content_sensitive`
- File content is *not stored* in the state when using the attribute `source`
- Changes to the content are detected via an MD5 checksum comparison
- File content is transferred from the client to the remote when the resource is created or the content has changed
- Transferred file content is compressed using gzip between client and remote

{{ .SchemaMarkdown | trimspace }}

{{ if .HasImport -}}
## Import

Import is supported using the following syntax:

{{ printf "{{codefile \"shell\" %q}}" .ImportFile }}
{{- end }}
