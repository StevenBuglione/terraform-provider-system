---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "{{.Name}} | {{.Type}} | {{.ProviderName}}"
name: "{{.Name}}"
type: "{{.Type}}"
subcategory: ""
description: |-
{{ .Description | plainmarkdown | trimspace | prefixlines "  " }}
---

# {{.Type}}: {{.Name}}

{{ .Description | trimspace }}

## Usage

### Start a timer

This example ensures that the systemd unit `hello-world.timer` is started. The unit must exist.

```terraform
resource "system_systemd_unit" "hello_world" {
  type   = "timer"
  name   = "hello-world"
  status = "started"
}
```

### Enable a timer

This example ensures that the systemd unit `hello-world.timer` is enabled and started. The unit must exist.

```terraform
resource "system_systemd_unit" "hello_world" {
  type    = "timer"
  name    = "hello-world"
  enabled = true
}
```

## Notes

This section describes general notes for using the `system_systemd_unit` resource.

- The systemd unit must exist; consider using the `system_file` resource to create and manage the unit file
- The resource does not create or delete the systemd unit file.
- The resource reloads the systemd configuration files (`systemctl daemon-reload`) before retrieving the current unit state or before changing the state of a unit.
- The resource remembers the `enabled` state and the `status` state at the time the resource is created. This state is referred to as the *original state*.
- When the resource is deleted, the unit is reverted to the original state.
- Avoid defining multiple `system_systemd_unit` resources, which manage the same unit in the same Terraform configuration. Instead, merge all attributes in a single `system_systemd_unit` resource.

{{ if .HasExample -}}
## Example Usage

{{ printf "{{tffile %q}}" .ExampleFile }}
{{- end }}

{{ .SchemaMarkdown | trimspace }}

{{ if .HasImport -}}
## Import

Import is supported using the following syntax:

{{ printf "{{codefile \"shell\" %q}}" .ImportFile }}
{{- end }}